/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as AccountRouteImport } from './routes/account/route'
import { Route as IndexImport } from './routes/index'
import { Route as ProductPidImport } from './routes/product.$pid'
import { Route as AccountDashboardImport } from './routes/account/dashboard'

// Create Virtual Routes

const ProductsLazyImport = createFileRoute('/products')()

// Create/Update Routes

const ProductsLazyRoute = ProductsLazyImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/products.lazy').then((d) => d.Route))

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const AccountRouteRoute = AccountRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProductPidRoute = ProductPidImport.update({
  id: '/product/$pid',
  path: '/product/$pid',
  getParentRoute: () => rootRoute,
} as any)

const AccountDashboardRoute = AccountDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AccountRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/account': {
      id: '/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountRouteImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/products': {
      id: '/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsLazyImport
      parentRoute: typeof rootRoute
    }
    '/account/dashboard': {
      id: '/account/dashboard'
      path: '/dashboard'
      fullPath: '/account/dashboard'
      preLoaderRoute: typeof AccountDashboardImport
      parentRoute: typeof AccountRouteImport
    }
    '/product/$pid': {
      id: '/product/$pid'
      path: '/product/$pid'
      fullPath: '/product/$pid'
      preLoaderRoute: typeof ProductPidImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AccountRouteRouteChildren {
  AccountDashboardRoute: typeof AccountDashboardRoute
}

const AccountRouteRouteChildren: AccountRouteRouteChildren = {
  AccountDashboardRoute: AccountDashboardRoute,
}

const AccountRouteRouteWithChildren = AccountRouteRoute._addFileChildren(
  AccountRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/account': typeof AccountRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/products': typeof ProductsLazyRoute
  '/account/dashboard': typeof AccountDashboardRoute
  '/product/$pid': typeof ProductPidRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/account': typeof AccountRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/products': typeof ProductsLazyRoute
  '/account/dashboard': typeof AccountDashboardRoute
  '/product/$pid': typeof ProductPidRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/account': typeof AccountRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/products': typeof ProductsLazyRoute
  '/account/dashboard': typeof AccountDashboardRoute
  '/product/$pid': typeof ProductPidRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/account'
    | '/about'
    | '/products'
    | '/account/dashboard'
    | '/product/$pid'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/account'
    | '/about'
    | '/products'
    | '/account/dashboard'
    | '/product/$pid'
  id:
    | '__root__'
    | '/'
    | '/account'
    | '/about'
    | '/products'
    | '/account/dashboard'
    | '/product/$pid'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccountRouteRoute: typeof AccountRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  ProductsLazyRoute: typeof ProductsLazyRoute
  ProductPidRoute: typeof ProductPidRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccountRouteRoute: AccountRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  ProductsLazyRoute: ProductsLazyRoute,
  ProductPidRoute: ProductPidRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/account",
        "/about",
        "/products",
        "/product/$pid"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/account": {
      "filePath": "account/route.jsx",
      "children": [
        "/account/dashboard"
      ]
    },
    "/about": {
      "filePath": "about.jsx"
    },
    "/products": {
      "filePath": "products.lazy.jsx"
    },
    "/account/dashboard": {
      "filePath": "account/dashboard.jsx",
      "parent": "/account"
    },
    "/product/$pid": {
      "filePath": "product.$pid.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
